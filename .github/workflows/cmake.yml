name: CMake

on:
  push:
    branches: [ development ]
  pull_request:
    branches: [ development ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  OMP_NUM_THREADS: 4

jobs:
  build:
    name: ${{matrix.os}}-${{matrix.cxx}}-mpi:${{matrix.mpi}}-openmp:${{matrix.omp}}
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{matrix.os}}
    env:
      CXX: ${{ matrix.cxx }}
    strategy:
      fail-fast: false
      matrix:
          os:
            - ubuntu-20.04
            - macos-11
          cxx:
            - g++
            - clang++
          mpi:
            - "ON"
            - "OFF"
          omp:
            - "ON"
            - "OFF"

    steps:
    - uses: actions/checkout@v2

    - name: Install Dependencies on Ubunutu
      if: ${{ contains(matrix.os, 'ubuntu') }}
      run: sudo apt install libfftw3-dev libtiff5-dev openmpi-bin libopenmpi-dev libboost-all-dev libeigen3-dev libyaml-cpp-dev ccache libcfitsio-dev casacore-dev

    - name: Install Dependencies on MacOS
      if: ${{ contains(matrix.os, 'macos') }}
      run: brew install fftw libtiff open-mpi boost libyaml cfitsio ccache

    - name: Prepare ccache timestamp
      id: ccache_cache_timestamp
      shell: cmake -P {0}
      run: |
        string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
        message("::set-output name=timestamp::${current_date}")
    - name: Set ccache cache directory
      shell: bash
      run: echo "CCACHE_DIR=${{runner.workspace}}/.ccache" >> "${GITHUB_ENV}"
    - name: Cache ccache files
      uses: actions/cache@v2
      with:
        path: ${{runner.workspace}}/.ccache
        key: ${{matrix.os}}-${{matrix.cxx}}-${{matrix.mpi}}-${{matrix.omp}}-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
        restore-keys: |
          ${{ matrix.os }}-${{ matrix.cxx }}-${{ matrix.mpi }}-${{ matrix.omp }}
          ${{ matrix.os }}-${{ matrix.cxx }}-${{ matrix.mpi }}
          ${{ matrix.os }}-${{ matrix.cxx }}
          ${{ matrix.os }}

#    - name: Clear ccache
#      run: ccache --clear

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
        -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
        -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
        -Ddompi=${{matrix.mpi}} -Dopenmp=${{matrix.omp}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel 2

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
