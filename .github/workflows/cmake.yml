name: CMake

on:
  push:
    branches: [ development ]
  pull_request:
    branches: [ development ]
    if: github.event.pull_request.draft == false
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    name: ${{matrix.os}}-${{matrix.cxx}}-mpi:${{matrix.mpi}}-openmp:${{matrix.omp}}
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{matrix.os}}
    env:
      CC: ${{ matrix.cc }}
      CXX: ${{ matrix.cxx }}
      OMP_NUM_THREADS: 2
      CONAN_SKIP_BROKEN_SYMLINKS_CHECK: 'True'
      CONAN_PRINT_RUN_COMMANDS: 1
      CONAN_CPU_COUNT: 2

    strategy:
      fail-fast: false
      matrix:
          os:
            - ubuntu-20.04
            - macos-11
          cc:
            - gcc-9
            - clang
          cxx:
            - g++-9
            - clang++
          mpi:
            - "on"
            - "off"
          omp:
            - "on"
            - "off"
          exclude:
            - cc: gcc-9
              cxx: clang++
            - cc: clang
              cxx: g++-9
            - os: ubuntu-20.04
              cc: clang
              cxx: clang++
            - os: macos-11
              mpi: "on"

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Install Dependencies on Ubunutu
      if: ${{ contains(matrix.os, 'ubuntu') }}
      run: |
        sudo apt install libfftw3-dev libtiff5-dev openmpi-bin libopenmpi-dev libboost-all-dev libeigen3-dev libyaml-cpp-dev ccache libcfitsio-dev casacore-dev
        pip install conan

    - name: Install Dependencies on MacOS
      if: ${{ contains(matrix.os, 'macos') }}
      run: brew install fftw libtiff open-mpi boost libyaml cfitsio ccache conan

   # Enable tmate debugging of manually-triggered workflows if the input option was provided
    - name: Setup tmate session
      uses: mxschmitt/action-tmate@v3
      if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled }}

    - name: Prepare ccache timestamp
      id: ccache_cache_timestamp
      shell: cmake -P {0}
      run: |
        string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
        message("::set-output name=timestamp::${current_date}")

    - name: Set ccache cache directory
      shell: bash
      run: echo "CCACHE_DIR=${{runner.workspace}}/.ccache" >> "${GITHUB_ENV}"

    - name: Cache ccache files
      uses: actions/cache@v2
      with:
        path: ${{runner.workspace}}/.ccache
        key: ${{matrix.os}}-${{matrix.cxx}}-${{matrix.mpi}}-${{matrix.omp}}-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
        restore-keys: |
          ${{ matrix.os }}-${{ matrix.cxx }}-${{ matrix.mpi }}-${{ matrix.omp }}
          ${{ matrix.os }}-${{ matrix.cxx }}-${{ matrix.mpi }}
          ${{ matrix.os }}-${{ matrix.cxx }}
          ${{ matrix.os }}

#    - name: Clear ccache
#      run: ccache --clear

    - name: create sopt package on gcc
      if: ${{ contains(matrix.cxx, 'g++-9') }}
      run: conan create ${{github.workspace}}/sopt --build missing -s:b compiler.libcxx=libstdc++11 -o:b mpi=${{matrix.mpi}} -o:b openmp=${{matrix.omp}}

    - name: create sopt package on apple-clang
      if: ${{ contains(matrix.cxx, 'clang++') }}
      run: conan create ${{github.workspace}}/sopt --build missing -o:b mpi=${{matrix.mpi}} -o:b openmp=${{matrix.omp}}

    - name: Conan install on gcc
      if: ${{ contains(matrix.cxx, 'g++-9') }}
      run: conan install ${{github.workspace}} -if ${{github.workspace}}/build -s compiler.libcxx=libstdc++11 --build missing  -o mpi=${{matrix.mpi}} -o openmp=${{matrix.omp}}

    - name: Conan install on apple-clang
      if: ${{ contains(matrix.cxx, 'clang++') }}
      run: conan install ${{github.workspace}} -if ${{github.workspace}}/build --build missing  -o mpi=${{matrix.mpi}} -o openmp=${{matrix.omp}}

    - name: Build
      # Build your program with the given configuration
      run: conan build ${{github.workspace}} -bf ${{github.workspace}}/build

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}} --output-on-failure
